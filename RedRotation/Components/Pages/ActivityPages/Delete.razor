@page "/activities/delete"
@inject RedRotation.Data.RedRotationContext DB
@using RedRotation.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Activity</h4>
    <hr />
    @if (activity is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@activity.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@activity.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastRotationDate</dt>
            <dd class="col-sm-10">@activity.LastRotationDate</dd>
        </dl>
        <EditForm method="post" Model="activity" OnValidSubmit="DeleteActivity" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(activity is null)">Delete</button> |
            <a href="/activities">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Activity? activity;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        activity = await DB.Activity.FirstOrDefaultAsync(m => m.Id == Id);

        if (activity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteActivity()
    {
        DB.Activity.Remove(activity!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/activities");
    }
}
